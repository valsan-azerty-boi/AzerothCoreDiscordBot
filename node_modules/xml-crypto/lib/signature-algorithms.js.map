{"version":3,"file":"signature-algorithms.js","sourceRoot":"","sources":["../src/signature-algorithms.ts"],"names":[],"mappings":"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","sourcesContent":["import * as crypto from \"crypto\";\r\nimport { type SignatureAlgorithm, createOptionalCallbackFunction } from \"./types\";\r\n\r\nexport class RsaSha1 implements SignatureAlgorithm {\r\n  getSignature = createOptionalCallbackFunction(\r\n    (signedInfo: crypto.BinaryLike, privateKey: crypto.KeyLike): string => {\r\n      const signer = crypto.createSign(\"RSA-SHA1\");\r\n      signer.update(signedInfo);\r\n      const res = signer.sign(privateKey, \"base64\");\r\n\r\n      return res;\r\n    },\r\n  );\r\n\r\n  verifySignature = createOptionalCallbackFunction(\r\n    (material: string, key: crypto.KeyLike, signatureValue: string): boolean => {\r\n      const verifier = crypto.createVerify(\"RSA-SHA1\");\r\n      verifier.update(material);\r\n      const res = verifier.verify(key, signatureValue, \"base64\");\r\n\r\n      return res;\r\n    },\r\n  );\r\n\r\n  getAlgorithmName = () => {\r\n    return \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\";\r\n  };\r\n}\r\n\r\nexport class RsaSha256 implements SignatureAlgorithm {\r\n  getSignature = createOptionalCallbackFunction(\r\n    (signedInfo: crypto.BinaryLike, privateKey: crypto.KeyLike): string => {\r\n      const signer = crypto.createSign(\"RSA-SHA256\");\r\n      signer.update(signedInfo);\r\n      const res = signer.sign(privateKey, \"base64\");\r\n\r\n      return res;\r\n    },\r\n  );\r\n\r\n  verifySignature = createOptionalCallbackFunction(\r\n    (material: string, key: crypto.KeyLike, signatureValue: string): boolean => {\r\n      const verifier = crypto.createVerify(\"RSA-SHA256\");\r\n      verifier.update(material);\r\n      const res = verifier.verify(key, signatureValue, \"base64\");\r\n\r\n      return res;\r\n    },\r\n  );\r\n\r\n  getAlgorithmName = () => {\r\n    return \"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\";\r\n  };\r\n}\r\n\r\nexport class RsaSha512 implements SignatureAlgorithm {\r\n  getSignature = createOptionalCallbackFunction(\r\n    (signedInfo: crypto.BinaryLike, privateKey: crypto.KeyLike): string => {\r\n      const signer = crypto.createSign(\"RSA-SHA512\");\r\n      signer.update(signedInfo);\r\n      const res = signer.sign(privateKey, \"base64\");\r\n\r\n      return res;\r\n    },\r\n  );\r\n\r\n  verifySignature = createOptionalCallbackFunction(\r\n    (material: string, key: crypto.KeyLike, signatureValue: string): boolean => {\r\n      const verifier = crypto.createVerify(\"RSA-SHA512\");\r\n      verifier.update(material);\r\n      const res = verifier.verify(key, signatureValue, \"base64\");\r\n\r\n      return res;\r\n    },\r\n  );\r\n\r\n  getAlgorithmName = () => {\r\n    return \"http://www.w3.org/2001/04/xmldsig-more#rsa-sha512\";\r\n  };\r\n}\r\n\r\nexport class HmacSha1 implements SignatureAlgorithm {\r\n  getSignature = createOptionalCallbackFunction(\r\n    (signedInfo: crypto.BinaryLike, privateKey: crypto.KeyLike): string => {\r\n      const signer = crypto.createHmac(\"SHA1\", privateKey);\r\n      signer.update(signedInfo);\r\n      const res = signer.digest(\"base64\");\r\n\r\n      return res;\r\n    },\r\n  );\r\n\r\n  verifySignature = createOptionalCallbackFunction(\r\n    (material: string, key: crypto.KeyLike, signatureValue: string): boolean => {\r\n      const verifier = crypto.createHmac(\"SHA1\", key);\r\n      verifier.update(material);\r\n      const res = verifier.digest(\"base64\");\r\n\r\n      return res === signatureValue;\r\n    },\r\n  );\r\n\r\n  getAlgorithmName = () => {\r\n    return \"http://www.w3.org/2000/09/xmldsig#hmac-sha1\";\r\n  };\r\n}\r\n"]}